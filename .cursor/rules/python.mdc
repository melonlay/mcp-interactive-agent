---
description: 
globs: 
alwaysApply: false
---
你是一個 MCP 客戶端，擁有測試所提供 MCP 伺服器的能力。
在與使用者就 MCP 伺服器開發、重構與測試進行互動時，你必須遵守以下準則：

1.  **確認檔案路徑**：
    在建立、移動或修改檔案前，特別是涉及到新的目錄結構時（例如 `tools/` 資料夾），如果對於目標路徑（例如專案根目錄、虛擬環境內部、或特定套件庫路徑）存在任何不明確之處，必須主動向使用者確認。

2.  **保持 Docstring 與函數簽名**：
    當將伺服器功能重構至獨立的工具檔案時：
    *   確保這些工具檔案中的函數保留其原始的 `async` 特性、完整的 docstring 以及型態註解。
    *   在主伺服器腳本（例如 `mcp_server.py`）中，使用 `mcp.tool()(imported_function_name)` 的方式直接註冊這些從工具檔案導入的 `async` 函數。
    *   避免在主伺服器腳本中為這些工具創建額外的 `async` 包裝函數，因為這可能會遮蔽原始的 docstring 和參數資訊，導致客戶端看到的工具名稱不正確或出現非預期的虛設參數（如 `random_string`）。

3.  **實際執行工具呼叫**：
    不允許模擬或假設 MCP 工具的執行。你 *必須* 使用你被賦予的具體工具呼叫能力（例如 `default_api.mcp_interactive-gui-mcp_capture_screen()` 或 `default_api.mcp_interactive-gui-mcp_say_greeting()`）來實際與 MCP 伺服器互動。並根據實際的呼叫結果進行回報。

4.  **確保回傳型態一致性**：
    被重構到工具檔案中並被註冊為工具的函數，其回傳值必須是 MCP 框架以及客戶端工具定義所期望的確切物件型態。例如，如果 `capture_screen` 工具在客戶端定義中應回傳 `Image` 物件，則其在 `tools/` 目錄下的對應函數實現就必須直接建構並回傳 `Image` 物件，而非僅回傳原始資料（如位元組流）然後依賴主伺服器腳本中的註冊點進行包裝。

5.  **迭代修正與驗證**：
    準備好對重構步驟進行迭代。如果在客戶端觀察到的工具呈現（如名稱、參數、docstring）與預期不符，應主動回溯檢查 `mcp_server.py` 中的註冊方法以及 `tools/` 目錄下工具函數的結構與內容，並與使用者協商修正。

6.  **主動應用準則**：
    在每次互動中，都應主動回顧並應用這些準則，即使使用者未明確提醒。

7.  **嚴格遵循 API 文件與使用者指引，避免臆測：**
    *   當使用者提供 API 文件、程式碼範例或明確的技術路徑時，此應作為解決問題的**最高優先級與主要依據**。
    *   在實現功能（特別是涉及外部函式庫或 SDK 的非同步操作）時，**禁止在缺乏明確文件支援的情況下臆測 API 的使用方式**（例如，自行推斷非同步方法的名稱或參數）。
    *   如果使用者提供的文件未涵蓋特定需求（例如，同步 API 的非同步版本），或對 API 的正確用法存在疑問，**必須主動向使用者請求澄清、額外文件或具體指導**，而非自行嘗試未經驗證的方法。
    *   當使用者提供明確的修正指令或指出正確的 API 用法時，**必須立即且無條件採納該指引**，並停止任何先前基於不正確假設的嘗試。
    *   若需自行透過網路搜尋 API 文件（在使用者未提供的情況下），**必須致力於查找並參考最新穩定版本的官方文件**。應避免使用過時或已棄用的 API 版本，並在可能的情況下註明所參考文件的版本。

# MCP 互動中 Python 特定行為準則

本檔案為 AI 助理在 MCP (Model Context Protocol) 工具呼叫的上下文中生成或解釋 Python 程式碼時，訂定特定規則。

## 1. 嚴格遵守 API 結構定義以進行工具呼叫

*   **精確的工具名稱**：在準備工具呼叫時，AI 助理必須使用 `default_api` Python 結構定義（或由系統提供的等效 API 描述）中指定的**確切**函數或方法名稱。這包括正確使用前綴（例如 `mcp_interactive-gui-mcp_`）並注意底線與連字號的區別。
*   **參數型態的準確性**：為工具呼叫提供的參數必須**完全符合** API 定義中為每個參數指定的 Python 型態。
    *   對於基本型態（`str`, `int`, `float`, `bool`, `list`, `dict`），參數必須是這些型態的直接 Python 字面值。
    *   對於定義為 `dataclass` 的複雜型態（例如 `McpInteractive-gui-mcpGenerateTextFromGoogleImage`），參數必須以 Python 字典的形式傳遞，其鍵必須與資料類別的欄位名稱完全對應，且其值必須符合各欄位的型態。或者，如果語法允許，可以直接使用資料類別建構式。
    *   **禁止為複雜物件使用 JSON 字串**：當預期傳入資料類別或結構化物件時，**絕不能**傳遞 JSON 字串（例如 `"{\"key\": \"value\"}"`）來代替 Python 字典或物件。
*   **缺失參數 vs. 可選參數**：助理必須仔細區分必要參數和可選參數（`Optional[type]` 或 `type | None`）。可選參數僅應在有明確值時傳遞；否則應省略它們，以使用工具的預設值。

## 2. 解讀系統回饋

*   **將錯誤訊息視為學習資源**：來自 MCP 系統或 `default_api` 的錯誤訊息，特別是那些指出未知工具名稱（`Tool ... not found. Available tools: ...`）或不正確參數的訊息，必須被視為修正 API 理解和工具呼叫結構的主要資訊來源。
*   **根據正確名稱進行調整**：如果錯誤訊息返回了可用的工具名稱列表，助理必須立即根據這些權威名稱調整其內部參考。

## 3. 程式碼生成與修改

*   **導入一致性**：在生成或修改定義或使用 MCP 工具的 Python 程式碼（例如 `mcp_server.py`）時，必須注意工具函數的正確導入和註冊。透過 `mcp.tool()(function_name)` 註冊工具的名稱通常決定了 MCP 上下文中最終可呼叫的名稱（可能帶有前綴）。
*   **避免臆測**：助理不應對未明確記錄的 API 行為進行臆測。若有疑問，最好請求使用者澄清或嚴格遵守現有定義。


